---
- name: Setup environment for Jetson and LXD
  hosts: all
  become: yes
  vars:
    # Paths (adjust as needed)
    system_manager_base_path: /opt/system_manager
    base_dir: /opt/jetson_packages
    data_dir: ../../data

    # Jetson package filenames and URLs (placeholders for BSP and rootfs)
    bsp_file_name: bsp_package.tbz2
    rootfs_file_name: rootfs_package.tbz2
    bsp_url: "http://example.com/path/to/bsp_package.tbz2"
    rootfs_url: "http://example.com/path/to/rootfs_package.tbz2"

    # Jetson configuration for jp3274 (Jetson Nano 4GB)
    jp3274:
      bsp_url: "https://developer.nvidia.com/downloads/embedded/l4t/r32_release_v7.4/t210/jetson-210_linux_r32.7.4_aarch64.tbz2"
      rootfs_url: "https://developer.nvidia.com/downloads/embedded/l4t/r32_release_v7.4/t210/tegra_linux_sample-root-filesystem_r32.7.4_aarch64.tbz2"
      install_dir: "{{ system_manager_base_path }}/jetson/Linux_for_Tegra_jp3274"
    # Jetson configuration for jp3541 (only a config file download is needed)
    jp3541:
      config_url: "http://193.55.250.147/rootfs-jetson/rootfs-basic-jp3541-noeula-user.tar.gz"
      config_dest: "{{ system_manager_base_path }}/config/rootfs-basic-jp3541-noeula-user.tar.gz"

    # Default user details for the Jetson setup
    username: mmtc
    password: tribe
    hostname: mmtc

  tasks:
    - name: Create folder structure for Jetson Linux configurations
      file:
        path: "{{ system_manager_base_path }}/jetson/Linux_for_Tegra_{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - jp3274
        - jp3541

    # ================================
    # Configure Jetson for jp3274 (Nano 4GB)
    # ================================
    - name: Download BSP for Jetson Nano 4GB (jp3274)
      get_url:
        url: "{{ jp3274.bsp_url }}"
        dest: "{{ jp3274.install_dir }}/jetson-210_linux_r32.7.4_aarch64.tbz2"
      register: jp3274_bsp
      changed_when: jp3274_bsp is changed

    - name: Download Tegra root filesystem for Jetson Nano 4GB (jp3274)
      get_url:
        url: "{{ jp3274.rootfs_url }}"
        dest: "{{ jp3274.install_dir }}/tegra_linux_sample-root-filesystem_r32.7.4_aarch64.tbz2"
      register: jp3274_rootfs
      changed_when: jp3274_rootfs is changed

    - name: Extract BSP archive for jp3274
      unarchive:
        src: "{{ jp3274.install_dir }}/jetson-210_linux_r32.7.4_aarch64.tbz2"
        dest: "{{ jp3274.install_dir }}"
        remote_src: yes

    - name: Extract Tegra root filesystem for jp3274
      shell: |
        tar -xf tegra_linux_sample-root-filesystem_r32.7.4_aarch64.tbz2 -C rootfs/
      args:
        chdir: "{{ jp3274.install_dir }}"
      # Alternatively, use unarchive if the archive is standard

    - name: Apply Jetson binaries for jp3274
      shell: |
        sudo add-apt-repository universe
        sudo apt-get update
        sudo apt-get install -y qemu-user-static
        sudo ./apply_binaries.sh
      args:
        chdir: "{{ jp3274.install_dir }}"

    - name: Create default Jetson user for jp3274
      shell: |
        sudo apt-get install -y lz4 libxml2-utils
        sudo ./tools/l4t_create_default_user.sh -u {{ username }} -p {{ password }} -n {{ hostname }} --accept-license
      args:
        chdir: "{{ jp3274.install_dir }}"

    # ================================
    # Configure Jetson for jp3541 (configuration file download)
    # ================================
    - name: Check if jp3541 config file exists
      stat:
        path: "{{ jp3541.config_dest }}"
      register: jp3541_config

    - name: Download jp3541 configuration file if missing
      get_url:
        url: "{{ jp3541.config_url }}"
        dest: "{{ jp3541.config_dest }}"
      when: not jp3541_config.stat.exists

    # ================================
    # Setup LXD Environment and Dependencies
    # ================================
    - name: Install LXD snap package
      shell: snap install lxd --channel=latest/stable
      args:
        creates: /snap/bin/lxd

    - name: Initialize LXD minimally
      shell: lxd init --minimal
      args:
        creates: /var/snap/lxd/common/lxd/server.crt

    - name: Add current user to lxd group
      user:
        name: "{{ lookup('env','USER') }}"
        groups: lxd
        append: yes

    - name: Install required apt packages for Python and system tools
      apt:
        name:
          - python3-fastapi
          - python3-pandas
          - python3-pylxd
          - python3-uvicorn
          - python3-redis
          - python3-netmiko
          - bzip2
          - jq
          - lz4
          - libxml2-utils
          - qemu-user-static
        state: present
        update_cache: yes

    - name: Install remaining Python dependency using pip
      command: python3 -m pip install --break-system-packages ansible-pylibssh
      become: yes

    # ================================
    # Download BSP and rootfs packages (if missing)
    # ================================
    - name: Check if BSP file exists in data directory
      stat:
        path: "{{ data_dir }}/{{ bsp_file_name }}"
      register: bsp_stat

    - name: Download BSP file if not present in data directory
      get_url:
        url: "{{ bsp_url }}"
        dest: "{{ data_dir }}/{{ bsp_file_name }}"
      when: not bsp_stat.stat.exists

    - name: Check if rootfs file exists in data directory
      stat:
        path: "{{ data_dir }}/{{ rootfs_file_name }}"
      register: rootfs_stat

    - name: Download rootfs file if not present in data directory
      get_url:
        url: "{{ rootfs_url }}"
        dest: "{{ data_dir }}/{{ rootfs_file_name }}"
      when: not rootfs_stat.stat.exists

    # ================================
    # Prepare Jetson API Deployment
    # ================================
    - name: Ensure api/jetson directory exists
      file:
        path: "{{ system_manager_base_path }}/api/jetson"
        state: directory

    - name: Extract Jetson Linux package
      unarchive:
        src: "{{ base_dir }}/Jetson_Linux_R35.4.1_aarch64.tbz2"
        dest: "{{ system_manager_base_path }}/api/jetson"
        remote_src: yes

    - name: Extract Tegra root filesystem
      unarchive:
        src: "{{ base_dir }}/Tegra_Linux_Sample-Root-Filesystem_R35.4.1_aarch64.tbz2"
        dest: "{{ system_manager_base_path }}/api/jetson/Linux_for_Tegra/rootfs"
        remote_src: yes

    - name: Add universe repository
      apt_repository:
        repo: "deb http://archive.ubuntu.com/ubuntu/ {{ ansible_distribution_release }} universe"
        state: present

    - name: Update apt cache for API deployment
      apt:
        update_cache: yes

    - name: Apply Jetson binaries for API deployment
      shell: sudo ./apply_binaries.sh
      args:
        chdir: "{{ system_manager_base_path }}/api/jetson/Linux_for_Tegra"

    - name: Create default Jetson user for API deployment
      shell: |
        sudo ./tools/l4t_create_default_user.sh -u {{ username }} -p {{ password }} -n {{ hostname }} --accept-license
      args:
        chdir: "{{ system_manager_base_path }}/api/jetson/Linux_for_Tegra"

    - name: Initialize active_users.json with an empty list
      copy:
        content: "[]"
        dest: "{{ system_manager_base_path }}/config/active_users.json"
        owner: nobody
        group: nogroup
        mode: '0666'
