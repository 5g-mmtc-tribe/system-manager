#!/usr/bin/env python3

import argparse
import subprocess
import os

from config import DHCP_CONFIG_FILE_PATH

class VmManager:
    @staticmethod
    def run_command(command, description):
        print(f"Running command: {description}")
        try:
            result = subprocess.run(command, capture_output=True, text=True, check=True)
            print("STDOUT:", result.stdout)
        except subprocess.CalledProcessError as e:
            print(f"Failed to execute command {description}: {e}")
            print("STDOUT:\n", e.stdout)
            print("STDERR:\n", e.stderr)

def reconfigure_dhcp_cmd():
    # Install the DHCP server
    command_librray_install = ["sudo", "apt", "install", "-y", "isc-dhcp-server"]
    VmManager.run_command(command_librray_install, "Install the DHCP server")
    
    # Copy the DHCP server config file
    command_librray_install = ["sudo", "cp", DHCP_CONFIG_FILE_PATH, "/etc/dhcp/dhcpd.conf"]
    VmManager.run_command(command_librray_install, "Copy DHCP config")

    # Restart and enable DHCP server
    command_librray_install = ["sudo", "systemctl", "restart", "isc-dhcp-server"]
    VmManager.run_command(command_librray_install, "Restart DHCP server")
    
    command_librray_install = ["sudo", "systemctl", "enable", "isc-dhcp-server"]
    VmManager.run_command(command_librray_install, "Enable DHCP server")

def download_rootfs_cmd(model):
    # Download root filesystem based on the model
    url = f"http://193.55.250.148/rootfs-{model}-user.tar.gz"
    command = ["sudo", "wget", "-O", "/root/rootfs-noeula-user.tar.gz", url]
    VmManager.run_command(command, "Download root filesystem")
    
    # Create NFS root directory if not exists
    if not os.path.exists('/root/nfsroot'):
        command_create_nfs_folder = ["sudo", "mkdir", "-p", "/root/nfsroot"]
        VmManager.run_command(command_create_nfs_folder, "Create NFS folder to be used on the Jetson (on the host)")

    # Extract the root filesystem
    command = ["sudo", "tar", "xpzf", "/root/rootfs-noeula-user.tar.gz", "-C", "/root/nfsroot/"]
    VmManager.run_command(command, "Extract root filesystem")

def create_nfs_server():
    # Check if the root filesystem file exists
    if not os.path.exists('/root/rootfs-noeula-user.tar.gz') or not os.path.exists('/root/nfsroot'):
        print("Error: The root filesystem does not appear to be downloaded or extracted.")
        print("Please run 'download-rootfs' command first.")
        return

    # Change NFS folder privileges
    command_chown_nfs_folder = ["sudo", "chown", "-R", "nobody:nogroup", "/root/nfsroot"]
    VmManager.run_command(command_chown_nfs_folder, "Change NFS folder privileges")

    command_chmod_nfs_folder = ["sudo", "chmod", "755", "/root/nfsroot"]
    VmManager.run_command(command_chmod_nfs_folder, "Change NFS folder permissions")

    # Install NFS server
    command_install_nfs_server = ["sudo", "apt", "install", "-y", "nfs-kernel-server"]
    VmManager.run_command(command_install_nfs_server, "Install NFS server")

    # Configure NFS exports
    nfs_export_config = '/root/nfsroot *(async,rw,no_root_squash,no_all_squash,no_subtree_check,insecure,anonuid=1000,anongid=1000)'
    command_configure_exports = f"echo '{nfs_export_config}' | sudo tee /etc/exports"
    VmManager.run_command(["sh", "-c", command_configure_exports], "Configure NFS exports")

    # Refresh exported NFS configuration to NFS service
    command_refresh_nfs = ["sudo", "exportfs", "-a"]
    VmManager.run_command(command_refresh_nfs, "Refresh exported NFS configuration to NFS service")

    # Restart and enable NFS service
    command_restart_nfs = ["sudo", "systemctl", "restart", "nfs-kernel-server"]
    VmManager.run_command(command_restart_nfs, "Restart NFS service")

    command_enable_nfs = ["sudo", "systemctl", "enable", "nfs-kernel-server"]
    VmManager.run_command(command_enable_nfs, "Enable NFS service")

def main():
    parser = argparse.ArgumentParser(description="Manage server configurations")
    subparsers = parser.add_subparsers(dest="command")

    # Subparser for reconfigure_dhcp command
    subparser_dhcp = subparsers.add_parser("reconfigure-dhcp", help="Reconfigure DHCP server")

    # Subparser for download_rootfs command
    subparser_download = subparsers.add_parser("download-rootfs", help="Download and extract root filesystem")
    subparser_download.add_argument("--model", required=True, help="Model name for the root filesystem")

    # Subparser for create_nfs_server command
    subparser_nfs = subparsers.add_parser("create-nfs-server", help="Create NFS server")

    args = parser.parse_args()

    if args.command == "reconfigure-dhcp":
        reconfigure_dhcp_cmd()
    elif args.command == "download-rootfs":
        download_rootfs_cmd(args.model)
    elif args.command == "create-nfs-server":
        create_nfs_server()
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
